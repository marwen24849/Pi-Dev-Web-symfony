{% extends 'base.html.twig' %}

{% block title %}Ajouter une Question{% endblock %}

{% block body %}
    <div class="row">
        <div class="col-md-12">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h4 class="card-title mb-0"><i class="fas fa-question-circle me-2"></i> Ajouter une Question</h4>
                </div>
                <div class="card-body">
                    {{ form_start(form, {'attr': {'novalidate': 'novalidate'}}) }}

                    <div class="row">
                        <!-- Colonne de gauche -->
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">Titre de la Question</label>
                                {{ form_widget(form.question_title, {'attr': {'class': 'form-control', 'placeholder': 'Entrez le titre de la question'}}) }}
                                {% if form_errors(form.question_title) %}
                                    <div class="invalid-feedback d-block">
                                        {{ form_errors(form.question_title) }}
                                    </div>
                                {% endif %}
                            </div>

                            <div class="form-group mt-3">
                                <label class="form-label">Catégorie</label>
                                {{ form_widget(form.category, {
                                    'attr': {
                                        'class': 'form-control category-autocomplete',
                                        'list': 'categorySuggestions',
                                        'autocomplete': 'off'
                                    }
                                }) }}
                                <datalist id="categorySuggestions"></datalist>
                                {% if form_errors(form.category) %}
                                    <div class="invalid-feedback d-block">
                                        {{ form_errors(form.category) }}
                                    </div>
                                {% endif %}
                            </div>

                            <div class="form-group mt-3">
                                <label class="form-label">Niveau de difficulté</label>
                                {{ form_widget(form.difficultylevel, {'attr': {'class': 'form-control'}}) }}
                                {% if form_errors(form.difficultylevel) %}
                                    <div class="invalid-feedback d-block">
                                        {{ form_errors(form.difficultylevel) }}
                                    </div>
                                {% endif %}
                            </div>

                            <div class="form-group mt-3">
                                <label class="form-label">Score</label>
                                {{ form_widget(form.score, {'attr': {'class': 'form-control'}}) }}
                                {% if form_errors(form.score) %}
                                    <div class="invalid-feedback d-block">
                                        {{ form_errors(form.score) }}
                                    </div>
                                {% endif %}
                            </div>
                        </div>

                        <!-- Colonne de droite -->
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">Choix possibles</label>
                                {% for i in 1..4 %}
                                    <div class="mb-3">
                                        {{ form_widget(attribute(form, 'option' ~ i), {
                                            'attr': {'class': 'form-control', 'placeholder': 'Option ' ~ i}
                                        }) }}
                                        {% if form_errors(attribute(form, 'option' ~ i)) %}
                                            <div class="invalid-feedback d-block">
                                                {{ form_errors(attribute(form, 'option' ~ i)) }}
                                            </div>
                                        {% endif %}
                                    </div>
                                {% endfor %}
                            </div>

                            <div class="form-group">
                                <label class="form-label">Bonne réponse</label>
                                {{ form_widget(form.right_answer, {'attr': {'class': 'form-control'}}) }}
                                {% if form_errors(form.right_answer) %}
                                    <div class="invalid-feedback d-block">
                                        {{ form_errors(form.right_answer) }}
                                    </div>
                                {% endif %}
                            </div>
                        </div>
                    </div>

                    <div class="row mt-4">
                        <div class="col-md-12 text-end">
                            <button type="submit" class="btn btn-success">
                                <i class="fas fa-save me-2"></i> Enregistrer
                            </button>
                        </div>
                    </div>

                    {{ form_end(form) }}
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const categoryInput = document.querySelector('.category-autocomplete');
            const datalist = document.getElementById('categorySuggestions');

            if (!categoryInput || !datalist) return;

            // Fonction pour charger les suggestions
            function updateSuggestions(query = '') {
                fetch('http://localhost:8000/question/categories/autocomplete?query=' + encodeURIComponent(query))
                    .then(response => response.json())
                    .then(categories => {
                        datalist.innerHTML = '';
                        categories.forEach(cat => {
                            const option = document.createElement('option');
                            option.value = cat;
                            datalist.appendChild(option);
                        });
                    })
                    .catch(error => {
                        console.error('Erreur de chargement des catégories:', error);
                    });
            }

            // Chargement initial
            updateSuggestions();

            // Met à jour la liste selon la saisie
            categoryInput.addEventListener('input', function () {
                this.value = this.value.toUpperCase();
                if (this.value.length >= 1) {
                    updateSuggestions(this.value);
                }
            });
        });
    </script>
{% endblock %}
