{# templates/chat/index.html.twig #}
{% extends 'front.html.twig' %}

{% block title %}AI Chat Assistant{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <style>
        :root {
            --primary-color: #4361ee;
            --primary-hover: #3a56d4;
            --secondary-color: #3a0ca3;
            --user-message-color: #4361ee;
            --assistant-message-color: #ffffff;
            --text-dark: #2d3748;
            --text-light: #f8f9fa;
            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --radius-lg: 12px;
            --radius-md: 8px;
            --transition: all 0.2s ease;
        }

        body {
            background-color: #f5f7fb;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            height: 100vh;
        }

        .chat-container {
            max-width: 1000px;
            height: 90vh;
            margin: 20px auto;
            border-radius: var(--radius-lg);
            box-shadow: var(--shadow-md);
            display: flex;
            flex-direction: column;
            background-color: white;
            overflow: hidden;
            transition: var(--transition);
        }

        .chat-header {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            padding: 18px 25px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .chat-header h2 {
            margin: 0;
            font-size: 1.5rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 25px;
            background-color: #f9fafc;
            scroll-behavior: smooth;
        }

        .message {
            max-width: 85%;
            margin-bottom: 20px;
            position: relative;
            opacity: 0;
            transform: translateY(10px);
            animation: fadeIn 0.3s ease-out forwards;
        }

        @keyframes fadeIn {
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .user-message {
            margin-left: auto;
            background-color: var(--user-message-color);
            color: white;
            border-radius: var(--radius-md) var(--radius-md) 0 var(--radius-md);
            padding: 15px 20px;
            box-shadow: var(--shadow-sm);
            transition: var(--transition);
        }

        .assistant-message {
            margin-right: auto;
            background-color: var(--assistant-message-color);
            color: var(--text-dark);
            border-radius: var(--radius-md) var(--radius-md) var(--radius-md) 0;
            padding: 15px 20px;
            box-shadow: var(--shadow-sm);
            border: 1px solid rgba(0, 0, 0, 0.05);
        }

        .message-time {
            font-size: 0.75rem;
            opacity: 0.7;
            margin-top: 8px;
            text-align: right;
            color: inherit;
        }

        .assistant-message .message-time {
            color: #6b7280;
        }

        .input-area {
            padding: 20px;
            background-color: white;
            border-top: 1px solid rgba(0, 0, 0, 0.08);
            position: relative;
        }

        .typing-indicator {
            display: inline-block;
            padding: 12px 20px;
            background-color: var(--assistant-message-color);
            border-radius: var(--radius-md) var(--radius-md) var(--radius-md) 0;
            box-shadow: var(--shadow-sm);
            margin-bottom: 20px;
            border: 1px solid rgba(0, 0, 0, 0.05);
        }

        .typing-dot {
            display: inline-block;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background-color: #9ca3af;
            margin-right: 4px;
            animation: typingAnimation 1.4s infinite ease-in-out;
        }

        @keyframes typingAnimation {
            0%, 60%, 100% { transform: translateY(0); opacity: 0.6; }
            30% { transform: translateY(-5px); opacity: 1; }
        }

        .welcome-message {
            text-align: center;
            padding: 30px 20px;
            color: #6b7280;
            max-width: 600px;
            margin: 0 auto;
        }

        .welcome-message h3 {
            color: var(--primary-color);
            font-size: 1.5rem;
            margin-bottom: 15px;
            font-weight: 600;
        }

        .welcome-message p {
            margin-bottom: 12px;
            line-height: 1.6;
        }

        .markdown-content {
            line-height: 1.7;
            word-wrap: break-word;
        }

        .markdown-content p {
            margin-bottom: 12px;
        }

        .markdown-content strong {
            font-weight: 600;
        }

        .markdown-content em {
            font-style: italic;
        }

        .markdown-content ul, .markdown-content ol {
            padding-left: 24px;
            margin: 12px 0;
        }

        .markdown-content li {
            margin-bottom: 6px;
        }

        .markdown-content code {
            background-color: rgba(175, 184, 193, 0.2);
            padding: 2px 6px;
            border-radius: 4px;
            font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
            font-size: 0.9em;
        }

        .markdown-content pre {
            background-color: #f6f8fa;
            padding: 12px;
            border-radius: 6px;
            overflow-x: auto;
            margin: 12px 0;
        }

        .markdown-content pre code {
            background-color: transparent;
            padding: 0;
        }

        .btn-clear {
            background-color: rgba(255, 255, 255, 0.15);
            border: none;
            color: white;
            cursor: pointer;
            padding: 8px 12px;
            border-radius: 6px;
            display: flex;
            align-items: center;
            gap: 6px;
            font-size: 0.9rem;
            transition: var(--transition);
        }

        .btn-clear:hover {
            background-color: rgba(255, 255, 255, 0.25);
        }

        #chatForm {
            display: flex;
            gap: 12px;
        }

        #messageInput {
            flex: 1;
            padding: 14px 18px;
            border-radius: var(--radius-md);
            border: 1px solid #e5e7eb;
            font-size: 1rem;
            transition: var(--transition);
            resize: none;
            min-height: 50px;
            max-height: 150px;
            line-height: 1.5;
        }

        #messageInput:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.15);
        }

        #sendButton {
            background-color: var(--primary-color);
            border: none;
            color: white;
            padding: 0 20px;
            border-radius: var(--radius-md);
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            justify-content: center;
        }

        #sendButton:hover {
            background-color: var(--primary-hover);
            transform: translateY(-1px);
        }

        #sendButton:active {
            transform: translateY(0);
        }

        .suggestions {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 15px;
        }

        .suggestion-chip {
            background-color: #e0e7ff;
            color: var(--primary-color);
            border: none;
            padding: 8px 16px;
            border-radius: 20px;
            cursor: pointer;
            font-size: 0.85rem;
            transition: var(--transition);
        }

        .suggestion-chip:hover {
            background-color: #d1d9ff;
        }

        /* Scrollbar styling */
        .chat-messages::-webkit-scrollbar {
            width: 8px;
        }

        .chat-messages::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 10px;
        }

        .chat-messages::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 10px;
        }

        .chat-messages::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .chat-container {
                height: 95vh;
                margin: 10px;
                border-radius: 12px;
            }

            .chat-header {
                padding: 15px;
            }

            .chat-messages {
                padding: 15px;
            }

            .message {
                max-width: 90%;
            }

            .input-area {
                padding: 15px;
            }
        }

        /* Copy button for code blocks */
        .copy-button {
            position: absolute;
            right: 10px;
            top: 10px;
            background: rgba(0, 0, 0, 0.05);
            border: none;
            border-radius: 4px;
            padding: 4px 8px;
            cursor: pointer;
            opacity: 0;
            transition: opacity 0.2s;
            font-size: 0.8rem;
        }

        pre:hover .copy-button {
            opacity: 1;
        }

        .copy-button:hover {
            background: rgba(0, 0, 0, 0.1);
        }

        /* Status indicator */
        .status-indicator {
            display: inline-block;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background-color: #4ade80;
            margin-right: 6px;
        }

        /* Message status */
        .message-status {
            font-size: 0.7rem;
            margin-left: 8px;
            opacity: 0.7;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="chat-container">
        <div class="chat-header">
            <h2><i class="bi bi-robot"></i> AI Assistant</h2>
            <button class="btn-clear" id="clearHistory" title="Clear conversation">
                <i class="bi bi-trash"></i> <span class="d-none d-sm-inline">Clear</span>
            </button>
        </div>

        <div class="chat-messages" id="chatMessages">
            {% if chatHistory is empty %}
                <div class="welcome-message">
                    <h3>Welcome to your AI Assistant</h3>
                    <p>I can help you with information, answer questions, and assist with various tasks.</p>
                    <p>Try asking:</p>
                    <div class="suggestions">
                        <div class="suggestion-chip">How do I request time off?</div>
                        <div class="suggestion-chip">Explain our HR policies</div>
                        <div class="suggestion-chip">Help with a technical issue</div>
                    </div>
                </div>
            {% else %}
                {% for message in chatHistory %}
                    <div class="message {{ message.role }}-message">
                        <div class="markdown-content">{{ message.content|raw }}</div>
                        <div class="message-time">
                            {{ message.timestamp|date('g:i A') }}
                            {% if message.role == 'user' %}
                                <span class="message-status"><i class="bi bi-check2-all"></i></span>
                            {% endif %}
                        </div>
                    </div>
                {% endfor %}
            {% endif %}
        </div>

        <div class="input-area">
            <form id="chatForm">
                <textarea id="messageInput" rows="1" placeholder="Type your message here..." autocomplete="off"></textarea>
                <button type="submit" id="sendButton" title="Send message">
                    <i class="bi bi-send-fill"></i>
                </button>
            </form>
            <div class="suggestions mt-2">
                <div class="suggestion-chip">How do I submit a reimbursement?</div>
                <div class="suggestion-chip">What's our remote work policy?</div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/dompurify@2.3.3/dist/purify.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const chatMessages = document.getElementById('chatMessages');
            const chatForm = document.getElementById('chatForm');
            const messageInput = document.getElementById('messageInput');
            const sendButton = document.getElementById('sendButton');
            const clearHistoryBtn = document.getElementById('clearHistory');
            const suggestionChips = document.querySelectorAll('.suggestion-chip');

            // Auto-resize textarea
            messageInput.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = (this.scrollHeight) + 'px';
            });

            // Function to add a message to the chat with animation
            function addMessage(content, role, timestamp = null) {
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${role}-message`;

                // Sanitize and parse markdown
                const sanitizedContent = DOMPurify.sanitize(content);
                const formattedContent = marked.parse(sanitizedContent);

                const time = timestamp ? new Date(timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})
                    : new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});

                messageDiv.innerHTML = `
                    <div class="markdown-content">${formattedContent}</div>
                    <div class="message-time">
                        ${time}
                        ${role === 'user' ? '<span class="message-status"><i class="bi bi-check2-all"></i></span>' : ''}
                    </div>
                `;

                chatMessages.appendChild(messageDiv);

                // Scroll to bottom with smooth behavior
                chatMessages.scrollTo({
                    top: chatMessages.scrollHeight,
                    behavior: 'smooth'
                });

                // Add copy buttons to code blocks
                addCopyButtons();
            }

            // Add copy buttons to code blocks
            function addCopyButtons() {
                document.querySelectorAll('pre').forEach(pre => {
                    if (!pre.querySelector('.copy-button')) {
                        const button = document.createElement('button');
                        button.className = 'copy-button';
                        button.innerHTML = '<i class="bi bi-clipboard"></i>';
                        button.addEventListener('click', () => {
                            const code = pre.querySelector('code')?.innerText || '';
                            navigator.clipboard.writeText(code).then(() => {
                                button.innerHTML = '<i class="bi bi-check2"></i>';
                                setTimeout(() => {
                                    button.innerHTML = '<i class="bi bi-clipboard"></i>';
                                }, 2000);
                            });
                        });
                        pre.style.position = 'relative';
                        pre.appendChild(button);
                    }
                });
            }

            // Show typing indicator
            function showTypingIndicator() {
                const typingDiv = document.createElement('div');
                typingDiv.className = 'message assistant-message typing-indicator';
                typingDiv.id = 'typingIndicator';
                typingDiv.innerHTML = `
                    <div class="typing-dots">
                        <span class="typing-dot"></span>
                        <span class="typing-dot"></span>
                        <span class="typing-dot"></span>
                    </div>
                `;
                chatMessages.appendChild(typingDiv);
                chatMessages.scrollTo({
                    top: chatMessages.scrollHeight,
                    behavior: 'smooth'
                });
            }

            // Hide typing indicator
            function hideTypingIndicator() {
                const typingIndicator = document.getElementById('typingIndicator');
                if (typingIndicator) {
                    typingIndicator.remove();
                }
            }

            // Handle form submission
            chatForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const message = messageInput.value.trim();

                if (message) {
                    // Add user message to chat
                    addMessage(message, 'user');
                    messageInput.value = '';
                    messageInput.style.height = 'auto';

                    // Disable input while waiting for response
                    messageInput.disabled = true;
                    sendButton.disabled = true;

                    // Show typing indicator
                    showTypingIndicator();

                    try {
                        // Send message to server
                        const response = await fetch('{{ path('app_chat_send') }}', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                message: message
                            })
                        });

                        const data = await response.json();

                        // Hide typing indicator
                        hideTypingIndicator();

                        // Add assistant response to chat
                        if (data.response) {
                            addMessage(data.response, 'assistant');
                        }

                    } catch (error) {
                        hideTypingIndicator();
                        addMessage("Sorry, I encountered an error. Please try again.", 'assistant');
                        console.error('Error:', error);
                    } finally {
                        // Re-enable input
                        messageInput.disabled = false;
                        sendButton.disabled = false;
                        messageInput.focus();
                    }
                }
            });

            // Clear chat history
            clearHistoryBtn.addEventListener('click', async function() {
                if (confirm('Are you sure you want to clear the conversation history?')) {
                    try {
                        await fetch('{{ path('app_chat_clear') }}', {
                            method: 'POST',
                        });

                        // Clear the chat UI with animation
                        chatMessages.style.opacity = '0';
                        setTimeout(() => {
                            chatMessages.innerHTML = `
                                <div class="welcome-message">
                                    <h3>New conversation started</h3>
                                    <p>What would you like to ask me about today?</p>
                                    <div class="suggestions">
                                        <div class="suggestion-chip">How do I update my personal details?</div>
                                        <div class="suggestion-chip">What's the process for promotions?</div>
                                        <div class="suggestion-chip">Explain our benefits package</div>
                                    </div>
                                </div>
                            `;
                            chatMessages.style.opacity = '1';
                        }, 300);
                    } catch (error) {
                        console.error('Error clearing history:', error);
                    }
                }
            });

            // Handle suggestion chips
            suggestionChips.forEach(chip => {
                chip.addEventListener('click', function() {
                    messageInput.value = this.textContent;
                    messageInput.focus();
                });
            });

            // Allow Shift+Enter for new line, Enter to submit
            messageInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    chatForm.dispatchEvent(new Event('submit'));
                }
            });

            // Focus input field on page load
            messageInput.focus();

            // Add copy buttons to existing code blocks
            addCopyButtons();

            // Animate in existing messages
            document.querySelectorAll('.message').forEach((msg, i) => {
                msg.style.animationDelay = `${i * 0.1}s`;
            });
        });
    </script>
{% endblock %}